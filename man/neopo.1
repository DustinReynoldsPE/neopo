.TH NEOPO 1 "November 2020" "neopo" "neopo Manual"

.SH NAME
.I neopo
\- A lightweight solution for local Particle development

.SH SYNOPSIS
.B neopo
[OPTIONS] [PROJECT] [-v/q]
.br
.B neopo
build [project]
.br
.B neopo
particle [OPTIONS]
.br
.B neopo
script <script name>

.SH DESCRIPTION
.P
Neopo is a Particle development management utility that simplifies the installation and usage of Particle's toolchains on a variety on distributions. It features options to build or flash projects, a scripting interface, iterable commands, and Particle Workbench/CLI compatibility. On Linux, several packages required for Workbench to operate sucessfully are listed as dependencies. Neopo provides incredible value to Workbench users, even if they do not use the neopo interface.

Neopo can additionally be used as a Python module, providing an interface to use local Particle development toolchains from within Python.

.SH OPTIONS

.SS GENERAL OPTIONS

.TP
.B help
When neopo runs without arguments, or with 
.B help,
brief documentation for all user-accessible commands is displayed.

.TP
.B install [-f]
Install Particle dependencies and setup the neopo environment. It takes an optional parameter of -f, which is used to force dependencies to be reinstalled, rather than skipped if already installed.

.TP
.B upgrade
Upgrade the neopo utility to the latest version available on GitHub. TODO: use package manager

.TP
.B uninstall
Uninstall neopo from the system. TODO: use package manager

.TP
.B versions
List all known versions and platforms available to neopo. To refresh, run
.B update.

.TP
.B create <project>
Create a new Particle project at the specified project path. The created project is compatible with neopo, Particle Workbench, and Particle CLI. If
.B git
is installed on your system, the project is additionally initialized as a repository and support for TravisCI is added.

.TP
.B particle [OPTIONS]
Access the Particle CLI executable used internally by neopo. By prefixing any Particle CLI command with
.B neopo particle,
Particle CLI can be accessed easily.

.SS BUILD OPTIONS

.TP
.B compile/build [project] [-v/q]
Compile the application firmware of a given Particle project, or the current directory if it's a project. Settings applied using
.B configure
will be passed to the compiler. The verbosity of the output can be increased with the -v flag, or the output can be quieted with the -q flag.

.TP
.B flash [project] [-v/q]
Compile application firmware and then flash the firmware to a connected device using DFU.

.TP
.B flash-all [project] [-v/q]
Compile application and system firmware and then flash all parts to a connected device using DFU.

.TP
.B clean [project] [-v/q]
Clean application firmware. Usually unnecessary but can eliminate some build errors.

.SS SPECIAL OPTIONS
.TP
.B run <target> [project] [-v/q]
Run a specified makefile target for a project. Includes common targets used by
.B BUILD OPTIONS
and other targets. The -v and -q flags are supported.

.TP
.B configure <platform> <version> [project]
Configure the device platform and deviceOS version a project should use. The platform and version are checked for compatibility and the specified version of deviceOS will be downloaded if it's not already installed.

To find deviceOS versions and their supported platforms use
.B versions.
The tab completion function is especially handy here since it can fill in platforms and versions.

.TP
.B flags <string> [project]
Set the EXTRA_CFLAGS variable for a project to be used during compilation.

.TP
.B settings [project]
View configured settings for a project. The device platform, deviceOS version, and EXTRA_CFLAGS will be printed out.

.TP
.B libs [project]
Verify or install the specified Particle libraries in
.B project.properties
for a project. This command is useful when working with a project that uses the cloud compiler because this allows you to quickly download the same libraries locally in a project.

.TP
.B iterate <command> [OPTIONS] [-v/q]
An advanced command used to run a supported command iteratively for all connected devices. For each connected device, the deviceID is printed, the device is put into DFU mode, and the specified iteration command is executed. This command was designed for quickly flashing to multiple connected devices, but there are many other ways this command can be used.

The following commands are supported:
.B compile,
.B build,
.B flash,
.B flash-all,
.B clean,
.B run,
.B script.

The -v and -q flags can be passed if the iterated command supports them.

.SS SCRIPT OPTIONS

One of the most powerful features of neopo is the scripting interface. Neopo scripts are a list of commands to run sequentially. Each command should be placed on its own line. Empty lines and lines starting with # are skipped. Any neopo command can be used in a neopo script,
.B even Particle commands.

Neopo scripts are plaintext and do not require an extension.

.TP
.B script <script name>
Execute a script in ~/.neopo/scripts

.TP
.B load <script name>
Copy a script into ~/.neopo/scripts

.SS DEPENDENCY OPTIONS:
.TP
.B update
Refresh the Workbench manifest and download Particle dependencies if there are newer versions available.

.TP
.B get <version>
Download a specified deviceOS version for later use. Handy for situations when you need to download firmware in advance.

.SH AUTHOR
.P
Nathan Robinson <nrobinson2000@me.com>

.SH REPORTING BUGS
.P
nrobinson2000/neopo on GitHub: <https://github.com/nrobinson2000/neopo>

.SH COPYRIGHT
.P
Copyright (c) 2020 - Nathan Robinson. MIT License: All rights reserved.

.SH SEE ALSO
Online Documentation: <https://neopo.xyz/docs/full-docs>
.br
Particle Developer Forum: <https://community.particle.io>
.br
Workbench Documentation: <https://docs.particle.io/workbench>
.br
Particle CLI Documentation: <https://docs.particle.io/reference/developer-tools/cli>

.SH NOTES

On Manjaro/Arch running on x86_64 or aarch64 there are several tweaks required to complete the installation of neopo. These are described in the following script:
.br
<https://github.com/nrobinson2000/neopo/scripts/POSTINSTALL>
